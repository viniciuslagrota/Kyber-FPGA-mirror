/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

//////////////////////////////////////////////
//
//	Includes
//
//////////////////////////////////////////////
#include "platform.h"
#include "include/global_def.h"

//////////////////////////////////////////////
//
//	Variables
//
//////////////////////////////////////////////
extern XGpio_Config * XGpioConfigPtrGlobalTimer;
extern XGpio XGpioGlobalTimer;

extern XGpio_Config * XGpioConfigPtrMont;
extern XGpio XGpioMont;

//////////////////////////////////////////////
//
//	Main
//
//////////////////////////////////////////////
int main()
{
    init_platform();
    print_debug(DEBUG_MAIN, "--- Kyber Algortithm ---\n\n");

    //---- Local variables ----
	u32 u32LedState = 0x0;

    //---- Initialize LED ----
    XGpioPs Gpio;
    ledInit(&Gpio);

    //---- Configure timers ----
    configTimer(XGpioConfigPtrGlobalTimer, &XGpioGlobalTimer, XPAR_AXI_GPIO_0_DEVICE_ID, 1);

    //Test mont
    XGpioConfigPtrMont = XGpio_LookupConfig(XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_CfgInitialize(&XGpioMont, XGpioConfigPtrMont, XGpioConfigPtrMont->BaseAddress);

    int32_t i32Value = 0;
    while(1)
    {
    	//---- Print chip temperature ----
		getChipTemperature();

    	//Blink led
		XGpioPs_WritePin(&Gpio, ledpin, u32LedState);
		u32LedState ^= 0x1;

		//KEM test
//		int result = kem_test(SYSTEM_NAME, KEM_TEST_ITERATIONS);
//		if(result)
//			print_debug(DEBUG_MAIN, "KEM succeed.\n\n");
//		else
//			print_debug(DEBUG_MAIN, "KEM failed.\n\n");

		//Test montgomery SW
		int16_t i16ResultSw;
		i16ResultSw = montgomery_reduce(i32Value);
		print_debug(DEBUG_MAIN, "Value: %ld; Result: %d\n", i32Value, i16ResultSw);

		//Test montgomery HW
		int16_t i16ResultHw;
		XGpio_DiscreteWrite(&XGpioMont, 1, i32Value); //Write value
		i16ResultHw = XGpio_DiscreteRead(&XGpioMont, 2); //Read value
		print_debug(DEBUG_MAIN, "Value: %ld; Result: %d\n", i32Value, i16ResultHw);

		//Compare and validade
		if(i16ResultSw != i16ResultHw)
		{
			print_debug(DEBUG_MAIN, "Value: %ld, Result: %d, Result: %d, Error!\n", i32Value, i16ResultSw, i16ResultHw);
			exit(0);
		}

		i32Value++;

//		sleep(1);
    }

    cleanup_platform();
    return 0;
}
