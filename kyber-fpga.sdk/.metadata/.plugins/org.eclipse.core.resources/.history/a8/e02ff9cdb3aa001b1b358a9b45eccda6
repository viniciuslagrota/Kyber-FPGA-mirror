/*
 * global_func.c
 *
 *  Created on: 5 de fev de 2021
 *      Author: vinicius
 */

#include "global_def.h"

//////////////////////////////////////////////
//
//	Fraction to integrer
//
//////////////////////////////////////////////
int XAdcFractionToInt(float FloatNum)
{
	float Temp;

	Temp = FloatNum;
	if (FloatNum < 0) {
		Temp = -(FloatNum);
	}

	return( ((int)((Temp -(float)((int)Temp)) * (1000.0f))));
}

//////////////////////////////////////////////
//
//	Print temperature
//
//////////////////////////////////////////////
void getChipTemperature()
{
	static XAdcPs XAdcInst;
	XAdcPs_Config *ConfigPtr;
	u32 TempRawData;
	float TempData;
	XAdcPs *XAdcInstPtr = &XAdcInst;

	ConfigPtr = XAdcPs_LookupConfig(XADC_DEVICE_ID);
	XAdcPs_CfgInitialize(XAdcInstPtr, ConfigPtr, ConfigPtr->BaseAddress);
	XAdcPs_SelfTest(XAdcInstPtr);
	XAdcPs_SetSequencerMode(XAdcInstPtr, XADCPS_SEQ_MODE_SAFE);
	TempRawData = XAdcPs_GetAdcData(XAdcInstPtr, XADCPS_CH_TEMP);
	srand(TempRawData); //Get a random seed here!
	TempData = XAdcPs_RawToTemperature(TempRawData);
	print_debug(DEBUG_MAIN, "[MAIN] The Current Temperature is %0d.%03d Centigrades\n", (int)(TempData), XAdcFractionToInt(TempData));
}

//////////////////////////////////////////////
//
//	LED initialize
//
//////////////////////////////////////////////
void ledInit(XGpioPs * Gpio)
{
	//---- Blink led ----
	XGpioPs_Config *GPIOConfigPtr;
	GPIOConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
	XGpioPs_CfgInitialize(Gpio, GPIOConfigPtr, GPIOConfigPtr ->BaseAddr);
	XGpioPs_SetDirectionPin(Gpio, ledpin, 1);
	XGpioPs_SetOutputEnablePin(Gpio, ledpin, 1);
}

//////////////////////////////////////////////
//
//	Configure Kyber K
//
//////////////////////////////////////////////
void configKyberK(XGpio_Config * pConfigStruct, XGpio * pGpioStruct, uint8_t ui8DeviceId, uint8_t ui8Channel)
{
	pConfigStruct = XGpio_LookupConfig(ui8DeviceId);
	XGpio_CfgInitialize(pGpioStruct, pConfigStruct, pConfigStruct->BaseAddress);
	XGpio_DiscreteWrite(pGpioStruct, ui8Channel, KYBER_K); //Set enable bit and reset bit low.
}

//////////////////////////////////////////////
//
//	Configure timer
//
//////////////////////////////////////////////
void configTimer(XGpio_Config * pConfigStruct, XGpio * pGpioStruct, uint8_t ui8DeviceId, uint8_t ui8Channel)
{
	pConfigStruct = XGpio_LookupConfig(ui8DeviceId);
	XGpio_CfgInitialize(pGpioStruct, pConfigStruct, pConfigStruct->BaseAddress);
	XGpio_DiscreteWrite(pGpioStruct, ui8Channel, 0x0); //Set enable bit and reset bit low.
}

//////////////////////////////////////////////
//
//	Reset hardware timer
//
//////////////////////////////////////////////
void resetTimer(XGpio * pStruct, uint8_t ui8Channel)
{
	XGpio_DiscreteWrite(pStruct, ui8Channel, 0x0); //Set reset bit low.
	XGpio_DiscreteWrite(pStruct, ui8Channel, 0x1); //Set reset bit high.
	XGpio_DiscreteWrite(pStruct, ui8Channel, 0x0); //Set reset bit low.
}

//////////////////////////////////////////////
//
//	Start hardware timer
//
//////////////////////////////////////////////
void startTimer(XGpio * pStruct, uint8_t ui8Channel)
{
	XGpio_DiscreteWrite(pStruct, ui8Channel, 0x2); //Set enable bit high.
}

//////////////////////////////////////////////
//
//	Stop hardware timer
//
//////////////////////////////////////////////
void stopTimer(XGpio * pStruct, uint8_t ui8Channel)
{
	XGpio_DiscreteWrite(pStruct, ui8Channel, 0x0); //Set enable bit low.
}

//////////////////////////////////////////////
//
//	Get hardware timer
//
//////////////////////////////////////////////
u32 getTimer(XGpio * pStruct, uint8_t ui8Channel)
{
	return XGpio_DiscreteRead(pStruct, ui8Channel);
}

//////////////////////////////////////////////
//
//	Float to integer and fraction
//
//////////////////////////////////////////////
void floatToIntegers(double dValue, u32 * u32Integer, u32 * u32Fraction)
{
	*u32Integer = dValue;
	*u32Fraction = (dValue - *u32Integer) * 1000;
}

//////////////////////////////////////////////
//
//	Reset time variables
//
//////////////////////////////////////////////
void resetTimeVariables()
{
	//Reset time variables
	u32PolyTomontHwTime = u32PolyTomontHwIt = 0;
	u32PolyTomontSwTime = u32PolyTomontSwIt = 0;
}

//////////////////////////////////////////////
//
//	Print time variables
//
//////////////////////////////////////////////
void printTimeVariables(u32 u32SystemState)
{
	u32 ui32Integer[4], ui32Fraction[4];

	//Tomont time
	if(u32SystemState & POLY_TOMONT_MASK)
	{
		floatToIntegers((double)u32PolyTomontHwTime/1000000, 	&ui32Integer[0], &ui32Fraction[0]);
		print_debug(DEBUG_TIME, "[TIME] Tomont HW iteractions: %lu | Tomont HW total time: %lu ns or %lu.%03lu ms\n", u32PolyTomontHwIt, u32PolyTomontHwTime, ui32Integer[0], ui32Fraction[0]);
	}
	else
	{
		floatToIntegers((double)u32PolyTomontSwTime/1000000, 	&ui32Integer[0], &ui32Fraction[0]);
		print_debug(DEBUG_TIME, "[TIME] Tomont SW iteractions: %lu | Tomont SW total time: %lu ns or %lu.%03lu ms\n", u32PolyTomontSwIt, u32PolyTomontSwTime, ui32Integer[0], ui32Fraction[0]);
	}
}
