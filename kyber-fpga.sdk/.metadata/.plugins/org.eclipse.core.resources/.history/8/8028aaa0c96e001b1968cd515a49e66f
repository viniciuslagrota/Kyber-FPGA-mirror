/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

//////////////////////////////////////////////
//
//	Includes
//
//////////////////////////////////////////////
#include "platform.h"
#include "include/global_def.h"
#include "include/poly.h"

//////////////////////////////////////////////
//
//	Variables
//
//////////////////////////////////////////////
extern XGpio_Config * XGpioConfigPtrGlobalTimer;
extern XGpio XGpioGlobalTimer;

extern XGpio_Config * XGpioConfigPolyTomont;
extern XGpio XGpioPolyTomont;

extern u32 *memoryBram0;
extern u32 *memoryBram1;

void poly_tomont_hw(poly * r)
{
//	memoryBram0 = (u32 *)r;
//	memcpy(memoryBram0, (u32 *)r, 512);
	memoryBram0[0] = (r->coeffs[1] << 16) | (r->coeffs[0] & 0xffff);
	memoryBram0[1] = (r->coeffs[3] << 16) | (r->coeffs[2] & 0xffff);
	memoryBram0[2] = (r->coeffs[5] << 16) | (r->coeffs[4] & 0xffff);
	memoryBram0[3] = (r->coeffs[7] << 16) | (r->coeffs[6] & 0xffff);
	memoryBram0[4] = (r->coeffs[9] << 16) | (r->coeffs[8] & 0xffff);
	memoryBram0[5] = (r->coeffs[11] << 16) | (r->coeffs[10] & 0xffff);
	memoryBram0[6] = (r->coeffs[13] << 16) | (r->coeffs[12] & 0xffff);
	memoryBram0[7] = (r->coeffs[15] << 16) | (r->coeffs[14] & 0xffff);
	memoryBram0[8] = (r->coeffs[17] << 16) | (r->coeffs[16] & 0xffff);
	memoryBram0[9] = (r->coeffs[19] << 16) | (r->coeffs[18] & 0xffff);
	memoryBram0[10] = (r->coeffs[21] << 16) | (r->coeffs[20] & 0xffff);
	memoryBram0[11] = (r->coeffs[23] << 16) | (r->coeffs[22] & 0xffff);
	memoryBram0[12] = (r->coeffs[25] << 16) | (r->coeffs[24] & 0xffff);
	memoryBram0[13] = (r->coeffs[27] << 16) | (r->coeffs[26] & 0xffff);
	memoryBram0[14] = (r->coeffs[29] << 16) | (r->coeffs[28] & 0xffff);
	memoryBram0[15] = (r->coeffs[31] << 16) | (r->coeffs[30] & 0xffff);
	memoryBram0[16] = (r->coeffs[33] << 16) | (r->coeffs[32] & 0xffff);
	memoryBram0[17] = (r->coeffs[35] << 16) | (r->coeffs[34] & 0xffff);
	memoryBram0[18] = (r->coeffs[37] << 16) | (r->coeffs[36] & 0xffff);
	memoryBram0[19] = (r->coeffs[39] << 16) | (r->coeffs[38] & 0xffff);
	memoryBram0[20] = (r->coeffs[41] << 16) | (r->coeffs[40] & 0xffff);
	memoryBram0[21] = (r->coeffs[43] << 16) | (r->coeffs[42] & 0xffff);
	memoryBram0[22] = (r->coeffs[45] << 16) | (r->coeffs[44] & 0xffff);
	memoryBram0[23] = (r->coeffs[47] << 16) | (r->coeffs[46] & 0xffff);
	memoryBram0[24] = (r->coeffs[49] << 16) | (r->coeffs[48] & 0xffff);
	memoryBram0[25] = (r->coeffs[51] << 16) | (r->coeffs[50] & 0xffff);
	memoryBram0[26] = (r->coeffs[53] << 16) | (r->coeffs[52] & 0xffff);
	memoryBram0[27] = (r->coeffs[55] << 16) | (r->coeffs[54] & 0xffff);
	memoryBram0[28] = (r->coeffs[57] << 16) | (r->coeffs[56] & 0xffff);
	memoryBram0[29] = (r->coeffs[59] << 16) | (r->coeffs[58] & 0xffff);
	memoryBram0[30] = (r->coeffs[61] << 16) | (r->coeffs[60] & 0xffff);
	memoryBram0[31] = (r->coeffs[63] << 16) | (r->coeffs[62] & 0xffff);
	memoryBram0[32] = (r->coeffs[65] << 16) | (r->coeffs[64] & 0xffff);
	memoryBram0[33] = (r->coeffs[67] << 16) | (r->coeffs[66] & 0xffff);
	memoryBram0[34] = (r->coeffs[69] << 16) | (r->coeffs[68] & 0xffff);
	memoryBram0[35] = (r->coeffs[71] << 16) | (r->coeffs[70] & 0xffff);
	memoryBram0[36] = (r->coeffs[73] << 16) | (r->coeffs[72] & 0xffff);
	memoryBram0[37] = (r->coeffs[75] << 16) | (r->coeffs[74] & 0xffff);
	memoryBram0[38] = (r->coeffs[77] << 16) | (r->coeffs[76] & 0xffff);
	memoryBram0[39] = (r->coeffs[79] << 16) | (r->coeffs[78] & 0xffff);
	memoryBram0[40] = (r->coeffs[81] << 16) | (r->coeffs[80] & 0xffff);
	memoryBram0[41] = (r->coeffs[83] << 16) | (r->coeffs[82] & 0xffff);
	memoryBram0[42] = (r->coeffs[85] << 16) | (r->coeffs[84] & 0xffff);
	memoryBram0[43] = (r->coeffs[87] << 16) | (r->coeffs[86] & 0xffff);
	memoryBram0[44] = (r->coeffs[89] << 16) | (r->coeffs[88] & 0xffff);
	memoryBram0[45] = (r->coeffs[91] << 16) | (r->coeffs[90] & 0xffff);
	memoryBram0[46] = (r->coeffs[93] << 16) | (r->coeffs[92] & 0xffff);
	memoryBram0[47] = (r->coeffs[95] << 16) | (r->coeffs[94] & 0xffff);
	memoryBram0[48] = (r->coeffs[97] << 16) | (r->coeffs[96] & 0xffff);
	memoryBram0[49] = (r->coeffs[99] << 16) | (r->coeffs[98] & 0xffff);
	memoryBram0[50] = (r->coeffs[101] << 16) | (r->coeffs[100] & 0xffff);
	memoryBram0[51] = (r->coeffs[103] << 16) | (r->coeffs[102] & 0xffff);
	memoryBram0[52] = (r->coeffs[105] << 16) | (r->coeffs[104] & 0xffff);
	memoryBram0[53] = (r->coeffs[107] << 16) | (r->coeffs[106] & 0xffff);
	memoryBram0[54] = (r->coeffs[109] << 16) | (r->coeffs[108] & 0xffff);
	memoryBram0[55] = (r->coeffs[111] << 16) | (r->coeffs[110] & 0xffff);
	memoryBram0[56] = (r->coeffs[113] << 16) | (r->coeffs[112] & 0xffff);
	memoryBram0[57] = (r->coeffs[115] << 16) | (r->coeffs[114] & 0xffff);
	memoryBram0[58] = (r->coeffs[117] << 16) | (r->coeffs[116] & 0xffff);
	memoryBram0[59] = (r->coeffs[119] << 16) | (r->coeffs[118] & 0xffff);
	memoryBram0[60] = (r->coeffs[121] << 16) | (r->coeffs[120] & 0xffff);
	memoryBram0[61] = (r->coeffs[123] << 16) | (r->coeffs[122] & 0xffff);
	memoryBram0[62] = (r->coeffs[125] << 16) | (r->coeffs[124] & 0xffff);
	memoryBram0[63] = (r->coeffs[127] << 16) | (r->coeffs[126] & 0xffff);
	memoryBram0[64] = (r->coeffs[129] << 16) | (r->coeffs[128] & 0xffff);
	memoryBram0[65] = (r->coeffs[131] << 16) | (r->coeffs[130] & 0xffff);
	memoryBram0[66] = (r->coeffs[133] << 16) | (r->coeffs[132] & 0xffff);
	memoryBram0[67] = (r->coeffs[135] << 16) | (r->coeffs[134] & 0xffff);
	memoryBram0[68] = (r->coeffs[137] << 16) | (r->coeffs[136] & 0xffff);
	memoryBram0[69] = (r->coeffs[139] << 16) | (r->coeffs[138] & 0xffff);
	memoryBram0[70] = (r->coeffs[141] << 16) | (r->coeffs[140] & 0xffff);
	memoryBram0[71] = (r->coeffs[143] << 16) | (r->coeffs[142] & 0xffff);
	memoryBram0[72] = (r->coeffs[145] << 16) | (r->coeffs[144] & 0xffff);
	memoryBram0[73] = (r->coeffs[147] << 16) | (r->coeffs[146] & 0xffff);
	memoryBram0[74] = (r->coeffs[149] << 16) | (r->coeffs[148] & 0xffff);
	memoryBram0[75] = (r->coeffs[151] << 16) | (r->coeffs[150] & 0xffff);
	memoryBram0[76] = (r->coeffs[153] << 16) | (r->coeffs[152] & 0xffff);
	memoryBram0[77] = (r->coeffs[155] << 16) | (r->coeffs[154] & 0xffff);
	memoryBram0[78] = (r->coeffs[157] << 16) | (r->coeffs[156] & 0xffff);
	memoryBram0[79] = (r->coeffs[159] << 16) | (r->coeffs[158] & 0xffff);
	memoryBram0[80] = (r->coeffs[161] << 16) | (r->coeffs[160] & 0xffff);
	memoryBram0[81] = (r->coeffs[163] << 16) | (r->coeffs[162] & 0xffff);
	memoryBram0[82] = (r->coeffs[165] << 16) | (r->coeffs[164] & 0xffff);
	memoryBram0[83] = (r->coeffs[167] << 16) | (r->coeffs[166] & 0xffff);
	memoryBram0[84] = (r->coeffs[169] << 16) | (r->coeffs[168] & 0xffff);
	memoryBram0[85] = (r->coeffs[171] << 16) | (r->coeffs[170] & 0xffff);
	memoryBram0[86] = (r->coeffs[173] << 16) | (r->coeffs[172] & 0xffff);
	memoryBram0[87] = (r->coeffs[175] << 16) | (r->coeffs[174] & 0xffff);
	memoryBram0[88] = (r->coeffs[177] << 16) | (r->coeffs[176] & 0xffff);
	memoryBram0[89] = (r->coeffs[179] << 16) | (r->coeffs[178] & 0xffff);
	memoryBram0[90] = (r->coeffs[181] << 16) | (r->coeffs[180] & 0xffff);
	memoryBram0[91] = (r->coeffs[183] << 16) | (r->coeffs[182] & 0xffff);
	memoryBram0[92] = (r->coeffs[185] << 16) | (r->coeffs[184] & 0xffff);
	memoryBram0[93] = (r->coeffs[187] << 16) | (r->coeffs[186] & 0xffff);
	memoryBram0[94] = (r->coeffs[189] << 16) | (r->coeffs[188] & 0xffff);
	memoryBram0[95] = (r->coeffs[191] << 16) | (r->coeffs[190] & 0xffff);
	memoryBram0[96] = (r->coeffs[193] << 16) | (r->coeffs[192] & 0xffff);
	memoryBram0[97] = (r->coeffs[195] << 16) | (r->coeffs[194] & 0xffff);
	memoryBram0[98] = (r->coeffs[197] << 16) | (r->coeffs[196] & 0xffff);
	memoryBram0[99] = (r->coeffs[199] << 16) | (r->coeffs[198] & 0xffff);
	memoryBram0[100] = (r->coeffs[201] << 16) | (r->coeffs[200] & 0xffff);
	memoryBram0[101] = (r->coeffs[203] << 16) | (r->coeffs[202] & 0xffff);
	memoryBram0[102] = (r->coeffs[205] << 16) | (r->coeffs[204] & 0xffff);
	memoryBram0[103] = (r->coeffs[207] << 16) | (r->coeffs[206] & 0xffff);
	memoryBram0[104] = (r->coeffs[209] << 16) | (r->coeffs[208] & 0xffff);
	memoryBram0[105] = (r->coeffs[211] << 16) | (r->coeffs[210] & 0xffff);
	memoryBram0[106] = (r->coeffs[213] << 16) | (r->coeffs[212] & 0xffff);
	memoryBram0[107] = (r->coeffs[215] << 16) | (r->coeffs[214] & 0xffff);
	memoryBram0[108] = (r->coeffs[217] << 16) | (r->coeffs[216] & 0xffff);
	memoryBram0[109] = (r->coeffs[219] << 16) | (r->coeffs[218] & 0xffff);
	memoryBram0[110] = (r->coeffs[221] << 16) | (r->coeffs[220] & 0xffff);
	memoryBram0[111] = (r->coeffs[223] << 16) | (r->coeffs[222] & 0xffff);
	memoryBram0[112] = (r->coeffs[225] << 16) | (r->coeffs[224] & 0xffff);
	memoryBram0[113] = (r->coeffs[227] << 16) | (r->coeffs[226] & 0xffff);
	memoryBram0[114] = (r->coeffs[229] << 16) | (r->coeffs[228] & 0xffff);
	memoryBram0[115] = (r->coeffs[231] << 16) | (r->coeffs[230] & 0xffff);
	memoryBram0[116] = (r->coeffs[233] << 16) | (r->coeffs[232] & 0xffff);
	memoryBram0[117] = (r->coeffs[235] << 16) | (r->coeffs[234] & 0xffff);
	memoryBram0[118] = (r->coeffs[237] << 16) | (r->coeffs[236] & 0xffff);
	memoryBram0[119] = (r->coeffs[239] << 16) | (r->coeffs[238] & 0xffff);
	memoryBram0[120] = (r->coeffs[241] << 16) | (r->coeffs[240] & 0xffff);
	memoryBram0[121] = (r->coeffs[243] << 16) | (r->coeffs[242] & 0xffff);
	memoryBram0[122] = (r->coeffs[245] << 16) | (r->coeffs[244] & 0xffff);
	memoryBram0[123] = (r->coeffs[247] << 16) | (r->coeffs[246] & 0xffff);
	memoryBram0[124] = (r->coeffs[249] << 16) | (r->coeffs[248] & 0xffff);
	memoryBram0[125] = (r->coeffs[251] << 16) | (r->coeffs[250] & 0xffff);
	memoryBram0[126] = (r->coeffs[253] << 16) | (r->coeffs[252] & 0xffff);
	memoryBram0[127] = (r->coeffs[255] << 16) | (r->coeffs[254] & 0xffff);

//	for(int i = 0; i < 4; i++)
//	{
//		print_debug(DEBUG_MAIN, "[MAIN] inside memoryBram0[%d]: 0x%08lx\n", i, memoryBram0[i]);
//	}

	//Start flag up
	XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x1);

	//Read busy signal
//	u32 u32ReadGpio = XGpio_DiscreteRead(&XGpioPolyTomont, 1);
//	while(u32ReadGpio == 1)
//		u32ReadGpio = XGpio_DiscreteRead(&XGpioPolyTomont, 1);

	//Start flag down
	XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x0);

//	for(int i = 0; i < 4; i++)
//	{
//		print_debug(DEBUG_MAIN, "[MAIN] inside memoryBram1[%d]: 0x%08lx\n", i, memoryBram1[i]);
//	}

	memcpy(r, (poly *)memoryBram1, 512);
}

//////////////////////////////////////////////
//
//	Main
//
//////////////////////////////////////////////
int main()
{
    init_platform();
    print_debug(DEBUG_MAIN, "--- Kyber Algortithm ---\n\n");

    //---- Local variables ----
	u32 u32LedState = 0x0;
	u32 u32ReadGpio = 0x0;

    //---- Initialize LED ----
    XGpioPs Gpio;
    ledInit(&Gpio);

    //---- Configure timers ----
    configTimer(XGpioConfigPtrGlobalTimer, &XGpioGlobalTimer, XPAR_AXI_GPIO_0_DEVICE_ID, 1);

    //Poly tomont test
    XGpioConfigPolyTomont = XGpio_LookupConfig(XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_CfgInitialize(&XGpioPolyTomont, XGpioConfigPolyTomont, XGpioConfigPolyTomont->BaseAddress);

	//---- Configure AXI BRAM ----
	memoryBram0 = (u32 *) XPAR_DUAL_BRAM_0_S00_AXI_BASEADDR;
	print_debug(DEBUG_MAIN, "[MAIN] Memory BRAM0 initialized. First position: 0x%08lx.\n", memoryBram0[0]);
	memoryBram0[0] = 0x0;

	memoryBram1 = (u32 *) XPAR_DUAL_BRAM_0_S01_AXI_BASEADDR;
	print_debug(DEBUG_MAIN, "[MAIN] Memory BRAM1 initialized. First position: 0x%08lx.\n", memoryBram1[0]);
	memoryBram1[0] = 0x0;

    while(1)
    {
    	//---- Print chip temperature ----
		getChipTemperature();

    	//Blink led
		XGpioPs_WritePin(&Gpio, ledpin, u32LedState);
		u32LedState ^= 0x1;

		//KEM test
//		int result = kem_test(SYSTEM_NAME, KEM_TEST_ITERATIONS);
//		if(result)
//			print_debug(DEBUG_MAIN, "KEM succeed.\n\n");
//		else
//			print_debug(DEBUG_MAIN, "KEM failed.\n\n");

		//Fqmul test
//		int16_t i16OutputSw, i16OutputHw;
//		uint32_t ui32Timer;
//		for(int16_t i16Input1 = 0; i16Input1 <= 0xFFFF; i16Input1++)
//		{
//			for(int16_t i16Input2 = 0; i16Input2 <= 0xFFFF; i16Input2++)
//			{
//				i16OutputSw = fqmul(i16Input1, i16Input2);
//				stopTimer(&XGpioGlobalTimer, 1);
////				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputSw);
//
//				XGpio_DiscreteWrite(&XGpioFqmulInput, 1, i16Input1);
//				XGpio_DiscreteWrite(&XGpioFqmulInput, 2, i16Input2);
//				i16OutputHw = XGpio_DiscreteRead(&XGpioFqmulOutput, 1);
////				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputHw);
//
//				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputHw);
//				if(i16OutputSw != i16OutputHw)
//					exit(0);
//
//				if(i16Input2 == -1)
//					break;
//			}
//
//			if(i16Input1 == -1)
//				break;
//		}

//		//----- BRAM test
		poly r1;
		poly r2;
//		//Initialize BRAM with data
		poly r_test = {0};
		for(int i = 0; i < 256; i++)
		{
			if(i % 2 == 0)
			{
				r_test.coeffs[i] = 0x0001;
			}
			else
			{
				r_test.coeffs[i] = 0x0002;
			}
		}

		memcpy(&r1, &r_test, 512);
		memcpy(&r2, &r_test, 512);

		resetTimer(&XGpioGlobalTimer, 1);
		u32 u32Timer1 = getTimer(&XGpioGlobalTimer, 1);
		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer HW: %ld ns\n", u32Timer1 * 10);
		startTimer(&XGpioGlobalTimer, 1);

		poly_tomont_hw(&r1);

		stopTimer(&XGpioGlobalTimer, 1);
		u32Timer1 = getTimer(&XGpioGlobalTimer, 1);

//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] outside memoryBram1[%d]: 0x%08lx\n", i, memoryBram1[i]);
//		}
//		for(int i = 0; i < 256; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly1 result[%d]: 0x%04x\n", i, r1.coeffs[i]);
//		}

		resetTimer(&XGpioGlobalTimer, 1);
		u32 u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer SW: %ld ns\n", u32Timer2 * 10);
		startTimer(&XGpioGlobalTimer, 1);

		poly_tomont(&r2);

		stopTimer(&XGpioGlobalTimer, 1);
		u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
//		for(int i = 0; i < 256; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly2 result[%d]: 0x%04x\n", i, r2.coeffs[i]);
//		}

		if(memcmp(&r1, &r2, 512) != 0)
		{
			print_debug(DEBUG_MAIN, "[MAIN] Error!\n");
			exit(0);
		}
		else
			print_debug(DEBUG_MAIN, "[MAIN] Ok!\n");

		print_debug(DEBUG_MAIN, "[MAIN] Timer SW: %ld ns\n", u32Timer2 * 10);
		print_debug(DEBUG_MAIN, "[MAIN] Timer HW: %ld ns\n", u32Timer1 * 10);

//		u32 r[4] = {0x00020001,0x00020001,0x00020001,0x00020001};
//		memcpy(memoryBram0, r, 16);
//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] memoryBram0 result[%d]: 0x%08x\n", i, memoryBram0[i]);
//		}
//		XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x1);
//		XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x0);
//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] memoryBram1 result[%d]: 0x%08x\n", i, memoryBram1[i]);
//		}

		sleep(1);
    }

    cleanup_platform();
    return 0;
}
