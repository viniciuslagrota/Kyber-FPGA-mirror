/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

//////////////////////////////////////////////
//
//	Includes
//
//////////////////////////////////////////////
#include "platform.h"
#include "include/global_def.h"
#include "include/poly.h"

#define UNROLLING_CPY(a, b) 								\
do 	{														\
	for(int i = 0; i < 256; i = i + 2)						\
	{														\
		a->coeffs[i     ] = b[(i >> 1)    ] & 0xffff;		\
		a->coeffs[i + 1 ] = b[(i >> 1)    ] >> 16;			\
	}														\
} while(0)

//////////////////////////////////////////////
//
//	Variables
//
//////////////////////////////////////////////
extern XGpio_Config * XGpioConfigPtrGlobalTimer;
extern XGpio XGpioGlobalTimer;

extern XGpio_Config * XGpioConfigPolyTomont;
extern XGpio XGpioPolyTomont;

extern u32 *memoryBram0;
extern u32 *memoryBram1;

void poly_tomont_hw(poly * r)
{
	u32 u32ReadGpio;

	memoryBram0 = (u32 *)r;
//	for(int i = 0; i < 4; i++)
//	{
//		print_debug(DEBUG_MAIN, "[MAIN] memoryBram0[%d]: 0x%08lx\n", i, memoryBram0[i]);
//	}

	//Start flag up
	XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x1);

	//Read busy signal
//	u32ReadGpio = XGpio_DiscreteRead(&XGpioPolyTomont, 1);
//	while(u32ReadGpio == 1)
//		u32ReadGpio = XGpio_DiscreteRead(&XGpioPolyTomont, 1);

	//Start flag down
	XGpio_DiscreteWrite(&XGpioPolyTomont, 1, 0x0);

	for(int i = 0; i < 128; i++)
	{
		print_debug(DEBUG_MAIN, "[MAIN] inside memoryBram1[%d]: 0x%08lx\n", i, memoryBram1[i]);
	}

//	memcpy(r, (poly *)memoryBram1, 512);
//	for(int i = 0; i < 256; i = i + 2)
//	{
//		r->coeffs[i] = memoryBram1[i >> 1] & 0xffff;
//		r->coeffs[i + 1] = memoryBram1[i >> 1] >> 16;
//	}
	UNROLLING_CPY(r, memoryBram1);
//	for(int i = 0; i < 4; i++)
//	{
//		print_debug(DEBUG_MAIN, "[MAIN] poly inside result[%d]: 0x%04x\n", i, r->coeffs[i]);
//	}
}

//////////////////////////////////////////////
//
//	Main
//
//////////////////////////////////////////////
int main()
{
    init_platform();
    print_debug(DEBUG_MAIN, "--- Kyber Algortithm ---\n\n");

    //---- Local variables ----
	u32 u32LedState = 0x0;
	u32 u32ReadGpio = 0x0;

    //---- Initialize LED ----
    XGpioPs Gpio;
    ledInit(&Gpio);

    //---- Configure timers ----
    configTimer(XGpioConfigPtrGlobalTimer, &XGpioGlobalTimer, XPAR_AXI_GPIO_0_DEVICE_ID, 1);

    //Poly tomont test
    XGpioConfigPolyTomont = XGpio_LookupConfig(XPAR_AXI_GPIO_1_DEVICE_ID);
	XGpio_CfgInitialize(&XGpioPolyTomont, XGpioConfigPolyTomont, XGpioConfigPolyTomont->BaseAddress);

	//---- Configure AXI BRAM ----
	memoryBram0 = (u32 *) XPAR_DUAL_BRAM_0_S00_AXI_BASEADDR;
	print_debug(DEBUG_MAIN, "[MAIN] Memory BRAM0 initialized.\n");

	memoryBram1 = (u32 *) XPAR_DUAL_BRAM_0_S01_AXI_BASEADDR;
	print_debug(DEBUG_MAIN, "[MAIN] Memory BRAM1 initialized.\n");

    while(1)
    {
    	//---- Print chip temperature ----
		getChipTemperature();

    	//Blink led
		XGpioPs_WritePin(&Gpio, ledpin, u32LedState);
		u32LedState ^= 0x1;

		//KEM test
//		int result = kem_test(SYSTEM_NAME, KEM_TEST_ITERATIONS);
//		if(result)
//			print_debug(DEBUG_MAIN, "KEM succeed.\n\n");
//		else
//			print_debug(DEBUG_MAIN, "KEM failed.\n\n");

		//Fqmul test
//		int16_t i16OutputSw, i16OutputHw;
//		uint32_t ui32Timer;
//		for(int16_t i16Input1 = 0; i16Input1 <= 0xFFFF; i16Input1++)
//		{
//			for(int16_t i16Input2 = 0; i16Input2 <= 0xFFFF; i16Input2++)
//			{
//				i16OutputSw = fqmul(i16Input1, i16Input2);
//				stopTimer(&XGpioGlobalTimer, 1);
////				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputSw);
//
//				XGpio_DiscreteWrite(&XGpioFqmulInput, 1, i16Input1);
//				XGpio_DiscreteWrite(&XGpioFqmulInput, 2, i16Input2);
//				i16OutputHw = XGpio_DiscreteRead(&XGpioFqmulOutput, 1);
////				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputHw);
//
//				print_debug(DEBUG_MAIN, "In1 = %d, In2 = %d, Out = %d\n", i16Input1, i16Input2, i16OutputHw);
//				if(i16OutputSw != i16OutputHw)
//					exit(0);
//
//				if(i16Input2 == -1)
//					break;
//			}
//
//			if(i16Input1 == -1)
//				break;
//		}

		//----- BRAM test
		poly r1;
		poly r2;
//		//Initialize BRAM with data
		poly r_test = {0};
		for(int i = 0; i < 256; i++)
		{
			if(i % 2 == 0)
			{
				r_test.coeffs[i] = 0x0001;
			}
			else
			{
				r_test.coeffs[i] = 0x0002;
			}
		}

		memcpy(&r1, &r_test, 512);
		memcpy(&r2, &r_test, 512);

		resetTimer(&XGpioGlobalTimer, 1);
		u32 u32Timer1 = getTimer(&XGpioGlobalTimer, 1);
		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer HW: %ld ns\n", u32Timer1 * 10);
		startTimer(&XGpioGlobalTimer, 1);

		poly_tomont_hw(&r1);

		stopTimer(&XGpioGlobalTimer, 1);
		u32Timer1 = getTimer(&XGpioGlobalTimer, 1);

//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] outside memoryBram1[%d]: 0x%08lx\n", i, memoryBram1[i]);
//		}
		for(int i = 0; i < 256; i++)
		{
			print_debug(DEBUG_MAIN, "[MAIN] poly1 result[%d]: 0x%04x\n", i, r1.coeffs[i]);
		}

		resetTimer(&XGpioGlobalTimer, 1);
		u32 u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer SW: %ld ns\n", u32Timer2 * 10);
		startTimer(&XGpioGlobalTimer, 1);

		poly_tomont(&r2);

		stopTimer(&XGpioGlobalTimer, 1);
		u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
		for(int i = 0; i < 256; i++)
		{
			print_debug(DEBUG_MAIN, "[MAIN] poly2 result[%d]: 0x%04x\n", i, r2.coeffs[i]);
		}

		if(memcmp(&r1, &r2, 512) != 0)
			print_debug(DEBUG_MAIN, "[MAIN] Error!\n");
		else
			print_debug(DEBUG_MAIN, "[MAIN] Ok!\n");

		print_debug(DEBUG_MAIN, "[MAIN] Timer SW: %ld ns\n", u32Timer2 * 10);
		print_debug(DEBUG_MAIN, "[MAIN] Timer HW: %ld ns\n", u32Timer1 * 10);


//		print_debug(DEBUG_MAIN, "[MAIN] Addr r3: 0x%08lx.\n", &r3);
//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly3 outside result[%d]: 0x%04x\n", i, r3.coeffs[i]);
//		}
//
//		resetTimer(&XGpioGlobalTimer, 1);
//		u32 u32Timer1 = getTimer(&XGpioGlobalTimer, 1);
//		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer HW: %ld ns\n", u32Timer1 * 10);
//		startTimer(&XGpioGlobalTimer, 1);
//
//		poly_tomont_hw(&r3);
//
//		stopTimer(&XGpioGlobalTimer, 1);
//		u32Timer1 = getTimer(&XGpioGlobalTimer, 1);
//		print_debug(DEBUG_MAIN, "[MAIN] Addr r3: 0x%08lx.\n", &r3);
//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly3 outside result[%d]: 0x%04x\n", i, r3.coeffs[i]);
//		}

		//Poly tomont test
//		memcpy(&r, &r_test, 512);
//		for(int i = 0; i < 256; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly[%d]: 0x%04x\n", i, r.coeffs[i]);
//		}
//		resetTimer(&XGpioGlobalTimer, 1);
//		u32 u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
//		print_debug(DEBUG_MAIN, "[MAIN] Reset Timer SW: %ld ns\n", u32Timer2 * 10);
//		startTimer(&XGpioGlobalTimer, 1);
//
//		poly_tomont(&r);
//
//		stopTimer(&XGpioGlobalTimer, 1);
//		u32Timer2 = getTimer(&XGpioGlobalTimer, 1);
//		for(int i = 0; i < 4; i++)
//		{
//			print_debug(DEBUG_MAIN, "[MAIN] poly result[%d]: 0x%04x\n", i, r.coeffs[i]);
//		}
//
//		if(memcmp(&r, &r3, 512) != 0)
//			print_debug(DEBUG_MAIN, "[MAIN] Error!\n");
//		else
//			print_debug(DEBUG_MAIN, "[MAIN] Ok!\n");

//		print_debug(DEBUG_MAIN, "[MAIN] Timer SW: %ld ns\n", u32Timer2 * 10);
//		print_debug(DEBUG_MAIN, "[MAIN] Timer HW: %ld ns\n", u32Timer1 * 10);


//		exit(0);

//		u32 vector[4] = { 0x00020001 , 0x00020001 , 0x00020001 , 0x00020001};
//		memcpy(memoryBram0, &r3, 512);

		sleep(1);
    }

    cleanup_platform();
    return 0;
}
